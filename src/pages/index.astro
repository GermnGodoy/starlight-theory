---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import SubscribeButton from '../components/SubscribeButton.astro';
import TagFilter from '../components/TagFilter.astro';
import ThemeToggle from '../components/ThemeToggle.astro';
import params from '../params.json';

// Get all blog posts
const allPosts = await getCollection('blog');

// Sort posts by date (newest first)
const sortedPosts = allPosts.sort((a, b) => new Date(b.data.editedAt).getTime() - new Date(a.data.editedAt).getTime());

// Get all unique tags
const allTags = [...new Set(allPosts.flatMap(post => post.data.tags))].sort();

function formatDate(dateString: string) {
  return new Intl.DateTimeFormat("en-US", {
    month: "long",
    year: "numeric",
    day: "numeric",
  }).format(new Date(dateString));
}
---

<Layout title="Starlight Theory">
  <div class="lg:grid grid-cols-[320px_1fr]">
    <!-- Sidebar -->
    <aside class="z-30 p-6 pl-4 pt-12 lg:p-10 lg:pl-6 border-black/75 top-0 flex flex-col gap-6 relative border-b lg:border-b-0 border-r border-l lg:sticky lg:h-screen bg-white/80 dark:bg-black/80  dark:border-white/30">
      <div class="flex items-start justify-between">
        <h1 class="font-serif text-[64px] leading-[1]">{params.site.title}</h1>
      </div>
      <div class="md:flex lg:block lg:space-y-8 space-y-6 md:space-y-0 items-center justify-between">
        <p class="leading-relaxed">
          {params.sidebar.description}{" "}
          <a
            class="underline underline-offset-2"
            href={params.site.author.twitter}
          >
            {params.site.author.name}.
          </a>
        </p>
        <SubscribeButton />
      </div>
      <footer class="mt-auto flex justify-between items-end text-gray11">
        <div class="flex items-center gap-3">
          <a
            href={params.sidebar.socialLinks.github.url}
            target="_blank"
            rel="noreferrer"
            class="hover:text-gray12 transition-colors"
            title={params.sidebar.socialLinks.github.title}
          >
            <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.30.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
            </svg>
          </a>
          <a
            href={params.sidebar.socialLinks.twitter.url}
            target="_blank"
            rel="noreferrer"
            class="hover:text-gray12 transition-colors"
            title={params.sidebar.socialLinks.twitter.title}
          >
            <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
              <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
            </svg>
          </a>
        </div>
        <ThemeToggle />
      </footer>
    </aside>

    <!-- Main content -->
    <div class="z-30 border-x lg:border-l-0 bg-white/90 dark:bg-black/90 border-black/75 dark:border-white/30">
      <!-- Featured section -->
      <div class="p-6 lg:p-10 border-b border-dashed border-black/50 dark:border-white/20">
        <a 
          class="flex gap-4 p-4 pr-0 bg-gray3-light dark:bg-gray3-dark border border-gray8 border-dashed relative items-center hover:bg-gray2-light dark:hover:bg-gray2-dark transition-colors" 
          href={params.homepage.featured.url}
        >
          <span class="flex flex-col lg:flex-row lg:gap-4 lg:items-center gap-1">
            <span class="font-medium">{params.homepage.featured.title}</span>
            <span class="text-sm">{params.homepage.featured.description}</span>
          </span>
          <svg class="ml-auto shrink-0" width="24" height="24" fill="none" viewBox="0 0 24 24">
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.5"
              d="M13.75 6.75L19.25 12L13.75 17.25"
            />
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.5"
              d="M19 12H4.75"
            />
          </svg>
          <span class="text-gray9">
            <span class="absolute -top-2 -right-2">
              <svg width="16" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="3">
                <path d="M17.25 6.75L6.75 17.25"></path>
                <path d="M6.75 6.75L17.25 17.25"></path>
              </svg>
            </span>
            <span class="absolute -top-2 -left-2">
              <svg width="16" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="3">
                <path d="M17.25 6.75L6.75 17.25"></path>
                <path d="M6.75 6.75L17.25 17.25"></path>
              </svg>
            </span>
            <span class="absolute -bottom-2 -right-2">
              <svg width="16" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="3">
                <path d="M17.25 6.75L6.75 17.25"></path>
                <path d="M6.75 6.75L17.25 17.25"></path>
              </svg>
            </span>
            <span class="absolute -bottom-2 -left-2">
              <svg width="16" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="3">
                <path d="M17.25 6.75L6.75 17.25"></path>
                <path d="M6.75 6.75L17.25 17.25"></path>
              </svg>
            </span>
          </span>
        </a>
      </div>

      <!-- Tag Filter -->
      <TagFilter allTags={allTags} allPosts={allPosts} />

      <!-- Posts list -->
      <ul class="divide-y divide-black/50 dark:divide-white/20 divide-dashed">
        {sortedPosts.map((post) => {
          const href = `/${post.slug}`;
          const image = post.data.image || '/images/default.png';
          const backgroundPattern = post.data.backgroundPattern;
          
          const getPlanetSVG = () => {
            return (
              <svg width="28" height="28" viewBox="0 0 28 28" class="planet-icon">
                <!-- Saturn outline with rings -->
                <circle cx="14" cy="14" r="6" fill="none" stroke="currentColor" stroke-width="1.5"/>
                <ellipse cx="14" cy="14" rx="10" ry="2.5" fill="none" stroke="currentColor" stroke-width="1" opacity="0.7"/>
                <ellipse cx="14" cy="14" rx="8" ry="1.8" fill="none" stroke="currentColor" stroke-width="0.8" opacity="0.5"/>
              </svg>
            );
          };
          
          return (
            <li 
              class="relative group" 
              data-post-tags={post.data.tags.join(',')}
            >
              <div class="w-px border border-black/75 dark:border-white/30 border-l-0 absolute -top-px -bottom-px left-full z-10 hidden lg:block group-hover:w-3 transition-all duration-300 bg-gray1-light-full dark:bg-gray4-dark-full group-hover:bg-gray1-light-full dark:group-hover:bg-gray4-dark-full"></div>
              <a
                href={href}
                class={`lg:p-5 lg:gap-10 block space-y-4 md:flex md:space-y-0 md:gap-8 p-6 relative bg-gray2-light/70 dark:bg-gray4-dark/70 group-hover:bg-gray1-light-full dark:group-hover:bg-gray4-dark-full transition-colors article-card border-t border-b border-dashed border-black/50 dark:border-white/20  items-center`}
                data-background-pattern={backgroundPattern || ''}
              >
                <img class="shrink-0 h-min w-full max-w-36 dark:invert" src={image} width="80" height="80" alt="" />
                <div class="ml-0 space-y-4 xl:flex xl:space-y-0 xl:gap-10 xl:justify-start items-center">
                  <header class="max-w-40 flex flex-col shrink-0 gap-0 z-20">
                    <h1 class="font-serif text-3xl leading-[1.3]">
                      {post.data.title}
                    </h1>
                    <p class="text-gray11 text-sm">
                      {formatDate(post.data.editedAt)}
                    </p>
                    <div class="flex flex-wrap gap-1 mt-2">
                      {post.data.tags.map(tag => (
                        <span class="text-xs px-2 py-1 bg-gray6-light dark:bg-gray6-dark text-gray1 dark:text-gray11 rounded-sm">
                          {tag}
                        </span>
                      ))}
                    </div>
                  </header>
                  <article class="text-left">
                    <p class="max-w-md line-clamp-5">{post.data.abstract}</p>
                  </article>
                </div>
                <div class="flex items-start lg:items-center ml-auto gap-4">
                  {getPlanetSVG()}
                </div>
              </a>
            </li>
          );
        })}
      </ul>
    </div>
  </div>
</Layout>

<style>
  /* Planet hover animations */
  .planet-icon {
    transform-origin: center;
    transition: transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Fast single rotation on hover entry */
  .group:hover .planet-icon {
    transform: rotate(360deg);
  }
  
  /* Article card pattern system with fallback handling */
  .article-card {
    position: relative;
  }
  
  .article-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: url("data:image/svg+xml,%3csvg width='60' height='60' xmlns='http://www.w3.org/2000/svg'%3e%3cdefs%3e%3cpattern id='saturn' x='0' y='0' width='60' height='60' patternUnits='userSpaceOnUse'%3e%3cg%3e%3ccircle cx='30' cy='30' r='12' fill='none' stroke='%23666666' stroke-width='2'/%3e%3cellipse cx='30' cy='30' rx='20' ry='5' fill='none' stroke='%23666666' stroke-width='1.5'/%3e%3cellipse cx='30' cy='30' rx='16' ry='3.6' fill='none' stroke='%23666666' stroke-width='1'/%3e%3c/g%3e%3c/pattern%3e%3crect width='100%25' height='100%25' fill='url(%23saturn)'/%3e%3c/svg%3e");
    background-size: 60px 60px;
    background-repeat: repeat;
    opacity: 1;
    pointer-events: none;
    z-index: 0;
    transition: opacity 0.3s ease;
  }
  
  .group:hover .article-card::before {
    opacity: 0.1;
  }
  
  .article-card > * {
    position: relative;
    z-index: 1;
  }
</style>

<script>
  // Handle custom background patterns with fallback to Saturn pattern
  document.addEventListener('DOMContentLoaded', () => {
    const articleCards = document.querySelectorAll('.article-card');
    
    articleCards.forEach((card, index) => {
      const customPattern = card.getAttribute('data-background-pattern');
      
      if (customPattern && customPattern.trim() !== '') {
        const uniqueId = `card-${index}`;
        card.setAttribute('data-card-id', uniqueId);
        
        const applyCustomPattern = () => {
          const styleEl = document.createElement('style');
          styleEl.textContent = `
            .article-card[data-card-id="${uniqueId}"]::before {
              background-image: url('${customPattern}') !important;
              background-size: 60px 60px !important;
              background-repeat: repeat !important;
              opacity: 0.4 !important;
            }
          `;
          document.head.appendChild(styleEl);
          console.log('Applied custom pattern:', customPattern);
        };
        
        // For data URIs, apply directly
        if (customPattern.startsWith('data:')) {
          try {
            applyCustomPattern();
          } catch (e) {
            console.log('Invalid data URI, using Saturn fallback:', customPattern);
          }
        } else {
          // For regular URLs, test loading first
          const testImg = new Image();
          
          testImg.onload = () => {
            applyCustomPattern();
          };
          
          testImg.onerror = () => {
            console.log('Failed to load custom pattern, using Saturn fallback:', customPattern);
          };
          
          testImg.src = customPattern;
        }
      }
      // If no custom pattern is specified, Saturn pattern is already applied as default
    });
  });
</script>
